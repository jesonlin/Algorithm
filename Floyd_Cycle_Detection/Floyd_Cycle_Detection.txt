    Floyd cycle detection算法，也叫做tortoise and hare算法，估计可以翻译为龟兔算法吧。以下内容为对解法做一归纳。

    问题：如何检测一个链表是否有环，如果有，那么如何确定环的起点.

    龟兔解法的基本思想可以用我们跑步的例子来解释，如果两个人同时出发，如果赛道有环，那么快的一方总能追上慢的一方。进一步想，追上时快的一方肯定比慢的一方多跑了几圈，即多跑的路的长度是圈的长度的倍数。

    基于上面的想法，Floyd用两个指针，一个慢指针（龟）每次前进一步，快指针（兔）指针每次前进两步（两步或多步效果是等价的，只要一个比另一个快就行，从后面的讨论我们可以看出这一点）。如果两者在链表头以外的某一点相遇（即相等）了，那么说明链表有环，否则，如果（快指针）到达了链表的结尾，那么说明没环。

    环的检测从上面的解释理解起来应该没有问题。接下来我们来看一下如何确定环的起点，这也是Floyd解法的第二部分。方法是将慢指针（或快指针）移到链表起点，两者同时移动，每次移动一步，那么两者相遇的地方就是环的起点。
    
    之后的面试中问到如何确定环的长度。当然，如果在确定环的起点后再跑一圈就可以，但这样就小题大作了。在确定有环后，再让快的和慢的指针跑一圈，再次追上后，快的比慢的正好多跑一圈，这就求出了环的长度。
